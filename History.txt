== 0.7.2 2010-?

* All tests run flawlessly (100% pass) with the following Ruby versions:
  * MRI 1.8.7 (2008-06-20 patchlevel 22) [x86_64-linux]
  * MRI 1.8.7 (2010-08-16 patchlevel 302) [x86_64-linux]
  * MRI ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-linux]
  * REE ruby 1.8.7 (2010-04-19 patchlevel 253) [x86_64-linux], MBARI 0x6770, Ruby Enterprise Edition 2010.02
  * jruby 1.5.3 (ruby 1.8.7 patchlevel 249) (2010-09-28 7ca06d7) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_17) [amd64-java]
  * rubinius 1.1.0 (1.8.7 release 2010-09-23 JI) [x86_64-unknown-linux-gnu]
  * But they fail with the following Ruby version:
    * ruby 1.8.6 (2010-02-05 patchlevel 399) [x86_64-linux]

== 0.7.1 2010-11-18

* 1 tiny change
  * Changed 'config/hoe.rb' so that RubyGems info is now correct.

== 0.7.0 2010-11-18

* 1 important bugfix:
  * Basic operations no longer alter the operands

* Lots fo small improvements:
  * new method #dup
  * requires no longer alter $:
  * README.txt finally written
  * fixed typo in HandyHash LoadError message
  * removed redundant #zero?
  * improved test handling of differences between Ruby 1.8 and 1.9
  * test coverage reached 100% (except for Multivariate which is currently at 93.71%)
  * All tests run flawlessly (100% pass) with the following Ruby versions:
    * MRI 1.8.7 (2008-06-20 patchlevel 22) [x86_64-linux]
    * MRI 1.8.7 (2010-08-16 patchlevel 302) [x86_64-linux]
    * MRI ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-linux]
    * jruby 1.5.3 (ruby 1.8.7 patchlevel 249) (2010-09-28 7ca06d7) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_17) [amd64-java]
    * rubinius 1.1.0 (1.8.7 release 2010-09-23 JI) [x86_64-unknown-linux-gnu]
    * But they fail with the following Ruby version:
      * ruby 1.8.6 (2010-02-05 patchlevel 399) [x86_64-linux]

== 0.6.0 2009-07-10

* 1 new feature:
  * Polynomial::Multivariate

== 0.5.3 2009-07-10

* 1 new feature:
  * Polynomial::Unity and Polynomial::Zero

* additional tests for substitute with BigDecimal coefficients and x

== 0.5.2 2009-06-22

* 1 bugfix: Polynomial[0]#to_s evaluates to "0" instead of ""

== 0.5.1 2009-06-22

* 1 minor enhancement:
  * comments rearranging for correct RDoc output
  * fixing some comments content
  * new comments added

== 0.5.0 2009-06-22

* 1 bugfix:
  * division by degree 1 polynomial now works as expected

* 5 new features:
  * Polynomial#%(d) gives the remainder of the division by d
  * Polynomial#**(n) raises to non-negative integer power
  * Polynomial#quodiv and #quo
    * like #divmod and #div but using #quo instead of #div, therefore if
      dividend and divisor are integers or rationals the quotient and rest
      will also be rational
  * Polynomial#new accepts degree + block, e.g. Polynomial.new(2) {|n| n+1 }
  * new module: Polynomials::Legendre

* 4 minor enhancements:
  * class variables changed to instance module variables
  * Ultraspherical particular alphas values of 0, 1 and 0.5 delegates
    respectively to Chebyshev first kind, second kind and Legendre.
  * coefs attr_reader access changed from protected to public
  * more tests: according to rcov, test coverage is 98.1% for polynomial class
    and 100% for Chebyshev, Legendre and Ultraspherical

* removed feature:
  * substitute(*xs) removed, and substitute_single(x) renamed to substitute(x)

== 0.4.3 2009-06-17

* 1 minor enhancement:
  * Ultraspherical alpha values no longer restricted to some predefined range
    - RangeError exception is only raised if degree of generated polynomial is not the required

== 0.4.2 2009-06-16

* 1 minor enhancement:
  * Polynomial.from_string now accepts numbers in scientific notation (e.g. '1e-2*x')

== 0.4.1 2009-06-15

* bugfixes
  * #to_s no longer spaces "1e-3" to "1e - 3"

* minor enhancements:
  * ultrasph. alpha range extended down to -0.99999999999999 (Polynomial::Ultraspherical::MinAlpha)
  * better tests for Chebyshev polynomials (concise, randomized)

== 0.4.0 2009-06-15

* 2 bugfixes:
  * Polynomial#coerce now works as expected, returning two Polynomial objects
  * Polynomial.from_string parsing is now faster and stricter

* 5 new methods:
  * to_num, to_f, to_i
  * divmod
  * /

* 3 new features:
  * Complex coefficients should work, though most tests are focused on Integer and Float
  * if HandyHash gem is installed, abbreviations are enabled
  * 2 new Polynomial#to_s parameters
    - :spaced to allow spaces between terms (default to true)
    - :decreasing, to allow greatest to smallest degree monomials
  * to_s

* 1 change:
  * default Polynomial#to_s parameters changed to match those of Polynomial.from_string

* 1 new module:
  * Polynomial::Ultraspherical - generates ultraspherical (Gegenbauer) polynomials

== 0.3.0 2009-06-12

* 2 minor enhancements:
  * Chebyshev module is now defined inside Polynomial class, thus
    it is now necessary to prepend Polynomial:: to method calls.

  * uncached interactive versions available:
    - Polynomial::Chebyshev.uncached_first_kind and ...second_kind
    - Default is cached.

Uncached versions have O(1) memory consumption versus O(n^2) of the cached
version, however its amortized (average of many calss) time consumption
is higher.

== 0.2.1 2009-06-09

* 1 minor enhancement:
  * interactive versions of Chebyshev.first_kind and Chebyshev.second_kind (2x faster)

== 0.2.0 2009-06-09

* 2 new features:
  * new initializer: Polynomial.new(pow_coef_hash)
  * new constructor: Polynomial.from_string

== 0.1.3 2009-06-09

* 1 compatibility change:
  * abandoned colons in favor of linebreaks in case statements, so that the gem is now Ruby 1.9 compatible

== 0.1.2 2009-02-14

* 1 minor enhancement:
  * to_s has a parameter to change the multiplication symbol from the default '*', e.g. to ''

== 0.1.1 2009-02-10

* 1 bugfix:
  * to_s no longer doubles plus signal when omitting a zero coefficient

* 1 minor enhancement:
  * to_s has a verbose flag to disable omitting powers with zero coefficient
  * to_s has a parameter to change the power symbol from the default '**', e.g. to '^'

== 0.1.0 2009-01-06

* 1 minor enhancement:
  * Substitute now accepts an array of x-values
  * New method #zero? (null polynomial)
  * New method #derivatives

== 0.0.2 2008-06-17

* 1 minor enhancement:
  * Simplifications due to Chebyshev not being a class anymore (it is now a module).

== 0.0.1 2008-05-06

* 1 major enhancement:
  * Initial release
